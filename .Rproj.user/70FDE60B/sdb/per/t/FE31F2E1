{
    "contents" : "# setRefClass(Class, fields = , contains = , methods =, where =, ...)\n# 参数列表：\n# \n# Class: 定义类名\n# fields: 定义属性和属性类型\n# contains: 定义父类，继承关系\n# methods: 定义类中的方法\n# where: 定义存储空间\n\n#定义一个RC类\nPer=setRefClass(Class = \"Person\",fields = list(name=\"character\",age=\"numeric\"))\nPer\n#实例化对象\nP1=Per$new(name=\"p1\",age=\"22\") #自带有效性检验\n \n#Error: invalid assignment for reference class field ‘age’, should be from class #“numeric” or a subclass (was class “character”)\n\nP1=Per$new(name=\"p1\",age=22) #自带有效性检验\nP1\n\nP1=Per$new(name=\"p1\",age=-22)\nP1\nclass(P1)\n\nlibrary(pryr)\notype(P1)\n\nfather=Per$new(name=\"papa\",age=44) \nmother=Per$new(name=\"mama\",age=40)\notype(father)  #\"RC\"\n#创建有继承关系的RC类\nson=setRefClass(Class = \"Son\",fileds=list(father=father,mother=mother),contains = \"Person\")   #报错\n\nson=setRefClass(Class = \"Son\",fields=list(school=\"character\"),contains = \"Person\")\n\n#实例化对象\ns1=son$new(school=\" No 1 middle school\")\ns1\ns1$age=11;s1\ns1@age=11  #Error in checkAtAssignment(\"Son\", \"age\", \"numeric\") : \n           #‘age’ is not a slot in class “Son”\n\n\n\n#RC对象的默认值\n\nson=setRefClass(class=\"Son\",fields=list(school=\"character\"),contains = \"Person\",\n                #设置对象的默认值\n                methods=list(\n                        initialize=function(x){\n                        cat(\"设置初始化对象\")\n                        x$name=\"gazi\"\n                        x$age=13\n                        }\n                        )\n                )\n\n\nson=setRefClass(class=\"Son\",fields=list(school=\"character\"),contains = \"Person\",\n                #设置对象的默认值\n                methods=list(\n                         #构造方法\n                        initialize = function(school){\n                                print(\"User::initialize\")\n                                # 给属性增加默认值\n                                school <<- 'conan'\n                               \n                                \n                        }\n                )\n)\n\n# 创建RC类User\n User<-setRefClass(\"User\",fields=list(name=\"character\"))\n\n# 创建User的子类Member\nMember<-setRefClass(\"Member\",contains=\"User\",fields=list(manager=\"User\"))\n User<-setRefClass(\"User\",\n                    \n                            # 定义2个属性\n                  fields=list(name=\"character\",level='numeric'),\n                    methods=list(\n                        # 构造方法\n                              initialize = function(name,level){\n                              print(\"User::initialize\")\n                                # 给属性增加默认值\n                                name <<- 'conan'\n                               level <<- 1\n }\n )\n)\n# 实例化对象u1\n u1<-User$new()\n#[1] \"User::initialize\"\n\n# 查看对象u1，属性被增加了默认值\n u1\n\n\n\n#对象赋值\np2=Per$new(name=\"p2\",age=40)\np2\n#p3由p2来复制，测试改了p2的值后，p3会改变吗\np3=p2\np3$age;p2$age\np2$age=50;p3$age #发现p3的值改变了，相当于p3只是指向了p2的内存，并没有新开一个内存\n\np4=p2$copy() #p4就是新开一个内存\np2$age=60\np4$age\n\n\n#RC中“方法可以也只能定义在类的内部，通过实例化的对象完成方法调用”。\n\n#定义一个RC类，包括方法\nPer_plus=setRefClass(\"Person\",fields = list(name=\"character\",age=\"numeric\",\n                                            act=\"vector\"),\n                     methods=list(\n                             #技能一：吃饭方法\n                             eat=function(x){\n                                     cat(\"time to eat now\")\n                                     act<<-c(act,x)\n                             },\n                             #技能2：睡觉方法\n                             sleep=function(x){\n                                     cat(\"time to sleep now\")\n                                     act<<-c(act,x)\n                             },\n                             #删除一个技能\n                             del=function(x){\n                                     act<<-act[1:(length(act)-1)]\n                             }\n                             \n                             ))\nPer_plus #新增了sleep 和eat和del方法\n#实例化对象\np1x=Per_plus$new(name=\"P1x\",age=24,act=c(\"go to class\",\"shooping\"))\np1x\np1x$eat(\"eat\")\np1x  #新增了吃饭的功能\np1x$sleep(\"sleeping\")\np1x  #新增了睡觉的功能\np1x$del(\"xx\")\np1x \n\n\n#RC对象内置方法和内置属性\n# 5.1 内置方法：\n\n# initialize 类的初始化函数，用于设置属性的默认值，只能在类定义的方法中使用。\n# callSuper 调用父类的同名方法，只能在类定义的方法中使用。\n# copy 复制实例化对象的所有属性。\n# initFields 给对象的属性赋值。\n# field 查看属性或给属性赋值。\n# getClass 查看对象的类定义。\n# getRefClass 同getClass。\n# show 查看当前对象。\n# export 查看属性值以类为作用域。\n# import 把一个对象的属性值赋值给另一个对象。\n# trace 跟踪对象中方法调用，用于程序debug。\n# untrace 取消跟踪。\n# usingMethods 用于实现方法调用，只能在类定义的方法中使用。这个方法不利于程序的健壮性，所以不建议使用。\n# 接下来，我们使用这些内置的方法。\n\n\n\np2x=p1x$copy();p2x\np2x$initFields()\nclass(p2x$initFields());otype(p2x$initFields())\np2x$initFields(name=\"p2x\")\np2x$getclass()  #S3的吧，报错\np2x$getRefClass() #查看对象的类定义。\np2x$show()  #查看当前对象。\nshow(p2x)  #同上\np2x #同上\np2x$trace(\"del\")  #Tracing reference method \"del\" for object from class \"Person\"\nPer_plus$methods() #P2x$methods()会报错,p2x是实例化的对象，而Per_plus是类型\nPer_plus$help()\nPer_plus$help(\"eat\")\nPer_plus$accessors(\"name\")  #给level属性增加get/set方法",
    "created" : 1448875319593.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "509794353",
    "id" : "FE31F2E1",
    "lastKnownWriteTime" : 1446090058,
    "path" : "D:/Git/stock/oop_RC.R",
    "project_path" : "oop_RC.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}