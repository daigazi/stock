{
    "contents" : "---\ntitle: \"learnGit\"\nauthor: \"daigazi\"\ndate: \"Friday, October 30, 2015\"\noutput: html_document\n---\n# Git 是什么\nGit是目前世界上最先进的分布式版本控制系统（没有之一）。\n\n# Git操作流程\n\n## 1.git安装\nmsysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可\n安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就\n说明Git安装成功！\n\n![alt text](http://www.liaoxuefeng.com/files/attachments/001384907073134ef6feff559cf4ce3a2c5c588d2831c0a000/0)\n\n## 2.初始化git姓名和网址设置\n\n$ git config --global user.name \"Your Name\"\n\n$ git config --global user.email \"email@example.com\"\n\n因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。\n你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良\n无知的群众，其次，真的有冒充的也是有办法可查的。\n\n## 3.创建版本库\n\n$ git cd D:/git   #cd 转到指定路径\n\n$ mkdir test  #新建文件夹\n\n$ cd test   $进入D:/git/test\n\n$ pwd   #查看当前路径\n\n$ git init  #初始化一个仓库reposity,可以发现当前目录下多了一个.git的目录\n\n$ ls -a    #显示当前目录下的所有文件，可以看到有.git这个隐藏文件，ls -ah同效果\n\n$ touch readme.txt  #创建一个readme.txt文件,自行在txt里添加东西\n\n$ git add readme.txt #新建的readme.txt通过git add 添加到git的缓存区中\n\n$ git add .   #添加当前修改文件到git缓存区\n\n$ git commit -m\"readme.txt添加到工作区中\"  \n\n$ cat readme.txt  #输出readme.txt内容\n\n\n$git status #查看仓库状态\n  \n$ git rm readme.txt  #从当前跟踪列表移除文件，并完全删除\n\n$git log  #查看git状态 \n\n$ git rm –cached readme.txt  #仅在暂存区删除，保留文件在当前目录，不再跟踪\n\n\n* 回拨仓库状态\n\n$git log #查看状态\n\n通过git log可能会发现有几个版本，用下面的句子看情况会舒服点\n\n$ git log -- pretty=oneline  #查看git状态，一行一行显示\n\n$ git -hard HEAD^ #往前回拨一个状态\n\n$ git -hard HEAD^^ #往前回拨两个状态\n\nHEAD表示当前状态，HEAD^ 是前一个状态，HEAD^^ 往前两个状态，HEAD100往前100个状态\n\n$ git reflog  #记录操作历史的每一条记录\n\n## 4.远程到仓库\n\n### 4.1.注册GitHub账号\n\n### 4.2.创建SSH Key\n\n第1步：在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa\n和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell\n（Windows下打开Git Bash），创建SSH Key：\n\n$ ssh-keygen -t rsa -C \"youremail@example.com\"\n\n第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n![alt text](http://www.liaoxuefeng.com/files/attachments/001384908342205cc1234dfe1b541ff88b90b44b30360da000/0)\n\n点“Add Key”，你就应该看到已经添加的Key：\n\n![alt text](http://www.liaoxuefeng.com/files/attachments/0013849083502905a4caa2dc6984acd8e39aa5ae5ad6c83000/0)\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n\n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。\n\n首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库\n\n![alt text](http://www.liaoxuefeng.com/files/attachments/0013849084639042e9b7d8d927140dba47c13e76fe5f0d6000/0)\n\n在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：\n\n![alt text](http://www.liaoxuefeng.com/files/attachments/0013849084720379a3eae576b9f417da2add578c8612a2e000/0)\n\n### 4.3.操作远程版本库\n\n$ git remote add origin git@github.com:daigazi/stock.git #关联github仓库\n\n推送你的更新到远程服务器,语法为 git push [远程名] [本地分支]:[远程分支]\n\n$ git push -u origin master  #推送文件到远程版本库\n\n\n从现在起，只要本地作了提交，就可以通过命令：\n\n$ git push origin master\n\n把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！\n\n\n### 4.4.从远程库克隆\n\n$ git clone git@github.com:michaelliao/gitskills.git\n\n## 5.文件更新回撤删除\n\n对readme.txt中再新增两行,查看git现在的状态\n\n$ git status\n```{r,eval=FALSE}\n On branch master\n Changes not staged for commit:\n (use \"git add <file>...\" to update what will be committed)\n (use \"git checkout -- <file>...\" to discard changes in working directory)\n  modified:   readme.txt\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n```\n\n从提示来看，告诉我们，readme.txt被修改了，但是还没有添加到缓存区内\n\n$ git diff #查看文件的变化\n\n```{r,eval=FALSE}\ndiff --git a/readme.txt b/readme.txt\nindex d55a7b6..75a0946 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,4 +1,2 @@\n-Git is a version control system.\n-Git is free software.\n-Git is a distributed version control system.\n-Git is free software.\n\\ No newline at end of file\n+Git is a distributed version control system.\n+Git is free software.\n\\ No newline at end of file\n\n```\n\n可以看添加了两行：\n\n```{r,eval=FALSE}\nGit is a distributed version control system.\nGit is free software.\n```\n$git add readme.txt  #添加到缓存区\n\n查看这个时候的仓库状态\n\n$ git status\n```{r,eval=FALSE}\n\n    git commit --amend --reset-author\n\n 1 file changed, 2 insertions(+), 4 deletions(-)\n\n\n```\n\n$git commit -m \"添加到工作区，再看下状态是否有变化\" \n\n查看这个时候的仓库状态\n\n$ git status\n\n```{r,eval=FALSE}\n$ git status\nOn branch master\nnothing to commit, working directory clean\n\n```\n\nGit告诉我们当前没有需要提交的修改，而且，工作目录是干净（working directory clean）的。\n\n\n\n\n$ git checkout --file #丢弃工作区内修改\n\n$ rm readme.txt  #在本地数据库里删除readme.txt\n\n如果这个时候远程的仓库里还没有同步，想在本地恢复这个文件,操作如下\n\n$ git checkout -- readme.txt #从远程拷贝readme.txt到本地\n\n\n\n\n\n$ git clone git@github.com:michaelliao/gitskills.git\n\n\n## 6.库基本的分支管理\n\n创建一个分支 \n\ngit branch iss53\n切换工作目录到iss53\n\ngit chekcout iss53\n将上面的命令合在一起，创建iss53分支并切换到iss53\n\ngit chekcout –b iss53\n合并iss53分支，当前工作目录为master\n\ngit merge iss53\n合并完成后，没有出现冲突，删除iss53分支\n\ngit branch –d iss53\n拉去远程仓库的数据，语法为 git fetch [remote-name]\n\ngit fetch\nfetch 会拉去最新的远程仓库数据，但不会自动到当前目录下，要自动合并\n\ngit pull\n查看远程仓库的信息\n\ngit remote show origin\n建立本地的dev分支追踪远程仓库的develop分支\n\ngit checkout –b dev origin/develop\n\n\n\n\n",
    "created" : 1446192031764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "168628677",
    "id" : "4BAF273F",
    "lastKnownWriteTime" : 1446197211,
    "path" : "D:/Git/stock/learngit.Rmd",
    "project_path" : "learngit.Rmd",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}